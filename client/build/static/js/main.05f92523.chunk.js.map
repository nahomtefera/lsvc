{"version":3,"sources":["components/livestream/videosvg.svg","components/socketComp/socketComp.jsx","components/livestream/livestream.jsx","components/login/login.jsx","components/livestream/users.jsx","components/livestream/chat.jsx","components/livestream/videostream.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","socket","offer","Socket","props","state","socketUrl","console","log","process","window","location","hostname","io","connect","secure","Component","Login","handleChange","value","target","setState","login","username","emit","data","isLogged","this","className","autoComplete","type","onChange","e","onClick","id","Users","users","on","createOffer","styles","fontWeight","padding","map","user","index","key","src","require","alt","Chat","sendMessage","message","chatMessages","newMessages","push","length","msg","VideoStream","autoPlay","muted","answersFrom","peerConnection","RTCPeerConnection","mozRTCPeerConnection","webkitRTCPeerConnection","msRTCPeerConnection","sessionDescription","RTCSessionDescription","mozRTCSessionDescription","webkitRTCSessionDescription","msRTCSessionDescription","navigator","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","pc","iceServers","url","credential","Livestream","error","err","warn","self","setLocalDescription","to","videos","onaddstream","obj","vid","document","createElement","setAttribute","getElementById","appendChild","srcObject","stream","video","audio","querySelector","addStream","setRemoteDescription","answer","classList","add","createAnswer","App","logged","Boolean","match","ReactDOM","render","StrictMode","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.05f92523.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/videosvg.3e889147.svg\";","import React, { Component, Fragment } from 'react';\n// Socket\nimport io from \"socket.io-client\";\n\nlet socket;\n\nclass Socket extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {  }\n  }\n\n  componentDidMount() {\n    console.log(process.env.NODE_ENV)\n    console.log(window.location.hostname)\n    let socketUrl;\n    process.env.NODE_ENV === 'production'\n     ? socketUrl = 'https://livestreamm.herokuapp.com/'\n     : socketUrl = 'https://livestreamm.herokuapp.com'\n    \n    console.log(socketUrl)\n    socket = io.connect(socketUrl, {secure: true})\n  }\n\n  render() { \n    return null\n  }\n}\n \nexport {Socket, socket};","import React, { Component } from 'react';\n// css\nimport './livestream.css';\n// socket\nimport {socket} from '../socketComp/socketComp'\n// components\nimport Users from './users';\nimport Chat from './chat';\nimport Videostream from './videostream';\n\nvar answersFrom = {}, offer;\n\nvar peerConnection = window.RTCPeerConnection ||\n  window.mozRTCPeerConnection ||\n  window.webkitRTCPeerConnection ||\n  window.msRTCPeerConnection;\n\nvar sessionDescription = window.RTCSessionDescription ||\n    window.mozRTCSessionDescription ||\n    window.webkitRTCSessionDescription ||\n    window.msRTCSessionDescription;\n\nnavigator.getUserMedia  = navigator.getUserMedia ||\n    navigator.webkitGetUserMedia ||\n    navigator.mozGetUserMedia ||\n    navigator.msGetUserMedia;\n\nvar pc = new peerConnection({\n  iceServers: [{\n      url: \"stun:stun.services.mozilla.com\",\n      username: \"somename\",\n      credential: \"somecredentials\"\n  }]\n});\n\nclass Livestream extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { videos: [] }\n  }\n\n  componentDidMount() {\n    let self = this;\n\n    pc.onaddstream = function (obj) {\n      console.log('pscstream:', obj)\n      var vid = document.createElement('video');\n      vid.setAttribute('class', 'video-stream');\n      vid.setAttribute('autoplay', 'autoplay');\n      vid.setAttribute('id', 'video-small');\n      document.getElementById('video-container').appendChild(vid);\n      vid.srcObject = obj.stream;\n    }\n\n    navigator.getUserMedia({video: true, audio: true}, function (stream) {\n      var video = document.querySelector('video');\n      video.srcObject = stream;\n      pc.addStream(stream);\n    }, self.error);\n\n    // SOCKET VIDEO REQUEST\n    socket.on('answer-made', function (data) {\n      pc.setRemoteDescription(new sessionDescription(data.answer), function () {\n          document.getElementById(data.socket).classList.add('active');\n          if (!answersFrom[data.socket]) {\n              self.createOffer(data.socket);\n              answersFrom[data.socket] = true;\n          }\n      }, self.error);\n    });\n\n    socket.on('offer-made', function (data) {\n      offer = data.offer;\n      console.log(offer)\n\n      pc.setRemoteDescription(new sessionDescription(data.offer), function () {\n          pc.createAnswer(function (answer) {\n              pc.setLocalDescription(new sessionDescription(answer), function () {\n                  console.log('MAKE ANSWER');\n                  socket.emit('make-answer', {\n                      answer: answer,\n                      to: data.socket\n                  });\n              }, self.error);\n          }, self.error);\n      }, self.error);\n    });\n  }\n\n  error = (err) => {\n    console.warn('Error', err);\n  }\n\n  createOffer = (id) =>{\n    let self = this;\n    pc.createOffer(function (offer) {\n      console.log('making offer: ', offer)\n        pc.setLocalDescription(new sessionDescription(offer), function () {\n            socket.emit('make-offer', {\n                offer: offer,\n                to: id\n            });\n        }, self.error);\n    }, self.error);\n    console.log(id)\n  }\n\n  render() { \n    return ( \n      <div className='livestream-container'>\n        <Users createOffer={this.createOffer}/>\n        <Chat />\n        <Videostream /> \n      </div>\n    );\n  }\n}\n \nexport default Livestream;","import React, { Component, Fragment } from 'react';\nimport './login.css';\nimport {socket} from '../socketComp/socketComp'\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { username: ''}\n  }\n\n  handleChange = (value, target) => {this.setState({[target]: value })} \n\n  login = () =>{\n    let username = this.state.username;\n    // If username field is not blank emit new user\n    if (username != '') {\n      socket.emit('new user', username, data => {\n        if (data) {\n          console.log(data)\n          this.props.isLogged() // update App state to isLogged: true\n        }\n      })\n    }\n  }\n\n  render() { \n    let username = this.state.username;\n    let handleChange = this.handleChange;\n\n    return ( \n      <div className='login-container'>\n        <input autoComplete=\"off\" type=\"text\" className='username'\n          onChange={(e) => {handleChange(e.target.value, 'username')}} \n          value={username} \n        />\n        \n        <button onClick={()=>{this.login()}} id=\"user-login-btn\">Login</button>\n      </div>\n    );\n  }\n}\n \nexport default Login;","import React, { Component } from 'react';\n// socket\nimport {socket} from '../socketComp/socketComp'\n\n\nclass Users extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      users: []\n    }\n  }\n\n  componentDidMount() {\n    // Get user's data\n    socket.on('get users', data => {\n      this.setState({users: data})\n    });\n  }\n\n  render() { \n    let users = this.state.users;\n    let createOffer = this.props.createOffer // function to request video call\n    return ( \n      <div className=\"users-container\">\n        <h3 styles={{fontWeight: '500', padding: '1em .5em'}}>Online Users</h3>\n        <ul className=\"users-list\">\n          {\n            users.map((user, index) => {\n              return (\n                <li key={index} className='username-item' id={user.id}>\n                  {user.username}\n                  <div className='camera-icon'>\n                    <img onClick={()=>{createOffer(user.id)}} src={require('./videosvg.svg')} alt=\"video-icon\"/>\n                  </div>\n                </li>\n              )\n            })\n          }\n        </ul>\n      </div>\n    );\n  }\n}\n \nexport default Users;","import React, { Component } from 'react';\nimport {socket} from '../socketComp/socketComp';\n\nclass Chat extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { message: '', chatMessages: [] }\n  }\n\n  componentDidMount() {\n    let newMessages = this.state.chatMessages;\n    // when a message is received update chatMessages\n    socket.on('new message', data => {\n      newMessages.push(data)\n      this.setState({chatMessages: newMessages})\n    })\n  }\n\n  handleChange = (value, target) => {this.setState({[target]: value })} \n\n  sendMessage = (message) => { socket.emit('send message', message); this.setState({message: ''}) }\n\n  render() { \n    let message = this.state.message;\n    let chatMessages = this.state.chatMessages;\n    let handleChange = this.handleChange;\n    let sendMessage = this.sendMessage;\n    return ( \n      <div className='chat-container'>\n        <div className=\"chat-messages\">\n          {\n            chatMessages.length === 0\n              ? null\n              : chatMessages.map((message, index) => {\n                return <div key={index} className='chat-message'><strong>{message.user}</strong> {message.msg}</div>\n              })\n          }\n        </div>\n\n        <div className=\"send-message-container\">\n          <input type=\"text\" className=\"chat-msg\" onChange={(e)=>{handleChange(e.target.value, 'message')}} value={message}/>\n          <button className=\"chat-btn\" onClick={()=>{sendMessage(message)}}>Send</button>\n        </div>\n      </div>\n    );\n  }\n}\n \nexport default Chat;","import React, { Component } from 'react';\n\nclass VideoStream extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {  }\n  }\n\n  render() { \n    return ( \n      <div className='videostream-container'>\n        <div id=\"video-container\">\n          <video className=\"video-stream\" autoPlay muted></video>\n        </div>\n      </div>\n    );\n  }\n}\n \nexport default VideoStream;","import React, { Component } from 'react';\nimport './App.css';\n// Components\nimport {Socket} from './components/socketComp/socketComp'; // socket connection\nimport Login from './components/login/login';\nimport Livestream from './components/livestream/livestream';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      logged: false\n    }\n  }\n\n  isLogged = () => {this.setState({logged: true})}\n\n  render() { \n    let logged = this.state.logged;\n\n    return ( \n      <div className=\"App\">\n        <Socket />\n        { \n          !logged \n            ? <Login isLogged = {this.isLogged} /> \n            : <Livestream /> \n        }\n      </div>\n    );\n  }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}